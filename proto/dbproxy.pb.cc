// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbproxy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbproxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dbproxy {

namespace {

const ::google::protobuf::Descriptor* PackageHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dbproxy_2eproto() {
  protobuf_AddDesc_dbproxy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dbproxy.proto");
  GOOGLE_CHECK(file != NULL);
  PackageHead_descriptor_ = file->message_type(0);
  static const int PackageHead_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageHead, content_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageHead, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageHead, cmd_),
  };
  PackageHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageHead_descriptor_,
      PackageHead::default_instance_,
      PackageHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageHead));
  GetReq_descriptor_ = file->message_type(1);
  static const int GetReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReq, prop_name_),
  };
  GetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetReq_descriptor_,
      GetReq::default_instance_,
      GetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetReq));
  GetResp_descriptor_ = file->message_type(2);
  static const int GetResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResp, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResp, error_message_),
  };
  GetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetResp_descriptor_,
      GetResp::default_instance_,
      GetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetResp));
  SetReq_descriptor_ = file->message_type(3);
  static const int SetReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReq, prop_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReq, prop_value_),
  };
  SetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetReq_descriptor_,
      SetReq::default_instance_,
      SetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetReq));
  SetResp_descriptor_ = file->message_type(4);
  static const int SetResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetResp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetResp, error_message_),
  };
  SetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetResp_descriptor_,
      SetResp::default_instance_,
      SetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetResp));
  DelReq_descriptor_ = file->message_type(5);
  static const int DelReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelReq, prop_name_),
  };
  DelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelReq_descriptor_,
      DelReq::default_instance_,
      DelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelReq));
  DelResp_descriptor_ = file->message_type(6);
  static const int DelResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResp, error_message_),
  };
  DelResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelResp_descriptor_,
      DelResp::default_instance_,
      DelResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelResp));
  Command_descriptor_ = file->enum_type(0);
  ErrorCode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dbproxy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageHead_descriptor_, &PackageHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetReq_descriptor_, &GetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetResp_descriptor_, &GetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetReq_descriptor_, &SetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetResp_descriptor_, &SetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelReq_descriptor_, &DelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelResp_descriptor_, &DelResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dbproxy_2eproto() {
  delete PackageHead::default_instance_;
  delete PackageHead_reflection_;
  delete GetReq::default_instance_;
  delete GetReq_reflection_;
  delete GetResp::default_instance_;
  delete GetResp_reflection_;
  delete SetReq::default_instance_;
  delete SetReq_reflection_;
  delete SetResp::default_instance_;
  delete SetResp_reflection_;
  delete DelReq::default_instance_;
  delete DelReq_reflection_;
  delete DelResp::default_instance_;
  delete DelResp_reflection_;
}

void protobuf_AddDesc_dbproxy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdbproxy.proto\022\007dbproxy\">\n\013PackageHead\022"
    "\026\n\016content_length\030\001 \002(\r\022\n\n\002sn\030\002 \002(\r\022\013\n\003c"
    "md\030\003 \002(\r\".\n\006GetReq\022\021\n\tplayer_id\030\001 \002(\t\022\021\n"
    "\tprop_name\030\002 \002(\t\"@\n\007GetResp\022\020\n\010ret_code\030"
    "\001 \002(\005\022\014\n\004data\030\002 \001(\014\022\025\n\rerror_message\030\003 \001"
    "(\t\"B\n\006SetReq\022\021\n\tplayer_id\030\001 \002(\t\022\021\n\tprop_"
    "name\030\002 \002(\t\022\022\n\nprop_value\030\003 \002(\014\"2\n\007SetRes"
    "p\022\020\n\010ret_code\030\001 \002(\005\022\025\n\rerror_message\030\002 \001"
    "(\t\".\n\006DelReq\022\021\n\tplayer_id\030\001 \002(\t\022\021\n\tprop_"
    "name\030\002 \002(\t\"2\n\007DelResp\022\020\n\010ret_code\030\001 \002(\005\022"
    "\025\n\rerror_message\030\002 \001(\t*r\n\007Command\022\017\n\013CMD"
    "_GET_REQ\020d\022\020\n\014CMD_GET_RESP\020e\022\017\n\013CMD_SET_"
    "REQ\020f\022\020\n\014CMD_SET_RESP\020g\022\017\n\013CMD_DEL_REQ\020h"
    "\022\020\n\014CMD_DEL_RESP\020i*}\n\tErrorCode\022\017\n\013ERR_S"
    "UCCESS\020\000\022\026\n\022ERR_MESSAGE_FORMAT\020d\022\024\n\020ERR_"
    "DB_EXCEPTION\020e\022\026\n\021ERR_GET_NOT_FOUND\020\310\001\022\031"
    "\n\024ERR_SET_REDIS_FAILED\020\311\001", 665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbproxy.proto", &protobuf_RegisterTypes);
  PackageHead::default_instance_ = new PackageHead();
  GetReq::default_instance_ = new GetReq();
  GetResp::default_instance_ = new GetResp();
  SetReq::default_instance_ = new SetReq();
  SetResp::default_instance_ = new SetResp();
  DelReq::default_instance_ = new DelReq();
  DelResp::default_instance_ = new DelResp();
  PackageHead::default_instance_->InitAsDefaultInstance();
  GetReq::default_instance_->InitAsDefaultInstance();
  GetResp::default_instance_->InitAsDefaultInstance();
  SetReq::default_instance_->InitAsDefaultInstance();
  SetResp::default_instance_->InitAsDefaultInstance();
  DelReq::default_instance_->InitAsDefaultInstance();
  DelResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dbproxy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dbproxy_2eproto {
  StaticDescriptorInitializer_dbproxy_2eproto() {
    protobuf_AddDesc_dbproxy_2eproto();
  }
} static_descriptor_initializer_dbproxy_2eproto_;
const ::google::protobuf::EnumDescriptor* Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}
bool Command_IsValid(int value) {
  switch(value) {
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 100:
    case 101:
    case 200:
    case 201:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PackageHead::kContentLengthFieldNumber;
const int PackageHead::kSnFieldNumber;
const int PackageHead::kCmdFieldNumber;
#endif  // !_MSC_VER

PackageHead::PackageHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageHead::InitAsDefaultInstance() {
}

PackageHead::PackageHead(const PackageHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageHead::SharedCtor() {
  _cached_size_ = 0;
  content_length_ = 0u;
  sn_ = 0u;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageHead::~PackageHead() {
  SharedDtor();
}

void PackageHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageHead_descriptor_;
}

const PackageHead& PackageHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

PackageHead* PackageHead::default_instance_ = NULL;

PackageHead* PackageHead::New() const {
  return new PackageHead;
}

void PackageHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    content_length_ = 0u;
    sn_ = 0u;
    cmd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 content_length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_length_)));
          set_has_content_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sn;
        break;
      }

      // required uint32 sn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sn_)));
          set_has_sn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cmd;
        break;
      }

      // required uint32 cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 content_length = 1;
  if (has_content_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->content_length(), output);
  }

  // required uint32 sn = 2;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sn(), output);
  }

  // required uint32 cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 content_length = 1;
  if (has_content_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->content_length(), target);
  }

  // required uint32 sn = 2;
  if (has_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sn(), target);
  }

  // required uint32 cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 content_length = 1;
    if (has_content_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_length());
    }

    // required uint32 sn = 2;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sn());
    }

    // required uint32 cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageHead::MergeFrom(const PackageHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content_length()) {
      set_content_length(from.content_length());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageHead::CopyFrom(const PackageHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PackageHead::Swap(PackageHead* other) {
  if (other != this) {
    std::swap(content_length_, other->content_length_);
    std::swap(sn_, other->sn_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageHead_descriptor_;
  metadata.reflection = PackageHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetReq::kPlayerIdFieldNumber;
const int GetReq::kPropNameFieldNumber;
#endif  // !_MSC_VER

GetReq::GetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetReq::InitAsDefaultInstance() {
}

GetReq::GetReq(const GetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetReq::~GetReq() {
  SharedDtor();
}

void GetReq::SharedDtor() {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    delete player_id_;
  }
  if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
    delete prop_name_;
  }
  if (this != default_instance_) {
  }
}

void GetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetReq_descriptor_;
}

const GetReq& GetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

GetReq* GetReq::default_instance_ = NULL;

GetReq* GetReq::New() const {
  return new GetReq;
}

void GetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != &::google::protobuf::internal::kEmptyString) {
        player_id_->clear();
      }
    }
    if (has_prop_name()) {
      if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
        prop_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_id().data(), this->player_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prop_name;
        break;
      }

      // required string prop_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prop_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prop_name().data(), this->prop_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->player_id(), output);
  }

  // required string prop_name = 2;
  if (has_prop_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prop_name().data(), this->prop_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->prop_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_id(), target);
  }

  // required string prop_name = 2;
  if (has_prop_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prop_name().data(), this->prop_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prop_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_id());
    }

    // required string prop_name = 2;
    if (has_prop_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prop_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetReq::MergeFrom(const GetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_prop_name()) {
      set_prop_name(from.prop_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReq::CopyFrom(const GetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetReq::Swap(GetReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(prop_name_, other->prop_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetReq_descriptor_;
  metadata.reflection = GetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetResp::kRetCodeFieldNumber;
const int GetResp::kDataFieldNumber;
const int GetResp::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

GetResp::GetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetResp::InitAsDefaultInstance() {
}

GetResp::GetResp(const GetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetResp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetResp::~GetResp() {
  SharedDtor();
}

void GetResp::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void GetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResp_descriptor_;
}

const GetResp& GetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

GetResp* GetResp::default_instance_ = NULL;

GetResp* GetResp::New() const {
  return new GetResp;
}

void GetResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error_message;
        break;
      }

      // optional string error_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  // optional string error_message = 3;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional string error_message = 3;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string error_message = 3;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetResp::MergeFrom(const GetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResp::CopyFrom(const GetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetResp::Swap(GetResp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResp_descriptor_;
  metadata.reflection = GetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetReq::kPlayerIdFieldNumber;
const int SetReq::kPropNameFieldNumber;
const int SetReq::kPropValueFieldNumber;
#endif  // !_MSC_VER

SetReq::SetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetReq::InitAsDefaultInstance() {
}

SetReq::SetReq(const SetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prop_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetReq::~SetReq() {
  SharedDtor();
}

void SetReq::SharedDtor() {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    delete player_id_;
  }
  if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
    delete prop_name_;
  }
  if (prop_value_ != &::google::protobuf::internal::kEmptyString) {
    delete prop_value_;
  }
  if (this != default_instance_) {
  }
}

void SetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetReq_descriptor_;
}

const SetReq& SetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

SetReq* SetReq::default_instance_ = NULL;

SetReq* SetReq::New() const {
  return new SetReq;
}

void SetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != &::google::protobuf::internal::kEmptyString) {
        player_id_->clear();
      }
    }
    if (has_prop_name()) {
      if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
        prop_name_->clear();
      }
    }
    if (has_prop_value()) {
      if (prop_value_ != &::google::protobuf::internal::kEmptyString) {
        prop_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_id().data(), this->player_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prop_name;
        break;
      }

      // required string prop_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prop_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prop_name().data(), this->prop_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prop_value;
        break;
      }

      // required bytes prop_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prop_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->player_id(), output);
  }

  // required string prop_name = 2;
  if (has_prop_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prop_name().data(), this->prop_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->prop_name(), output);
  }

  // required bytes prop_value = 3;
  if (has_prop_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->prop_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_id(), target);
  }

  // required string prop_name = 2;
  if (has_prop_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prop_name().data(), this->prop_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prop_name(), target);
  }

  // required bytes prop_value = 3;
  if (has_prop_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->prop_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_id());
    }

    // required string prop_name = 2;
    if (has_prop_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prop_name());
    }

    // required bytes prop_value = 3;
    if (has_prop_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prop_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetReq::MergeFrom(const SetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_prop_name()) {
      set_prop_name(from.prop_name());
    }
    if (from.has_prop_value()) {
      set_prop_value(from.prop_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetReq::CopyFrom(const SetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SetReq::Swap(SetReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(prop_name_, other->prop_name_);
    std::swap(prop_value_, other->prop_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetReq_descriptor_;
  metadata.reflection = SetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetResp::kRetCodeFieldNumber;
const int SetResp::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

SetResp::SetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetResp::InitAsDefaultInstance() {
}

SetResp::SetResp(const SetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetResp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetResp::~SetResp() {
  SharedDtor();
}

void SetResp::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void SetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetResp_descriptor_;
}

const SetResp& SetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

SetResp* SetResp::default_instance_ = NULL;

SetResp* SetResp::New() const {
  return new SetResp;
}

void SetResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetResp::MergeFrom(const SetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetResp::CopyFrom(const SetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetResp::Swap(SetResp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetResp_descriptor_;
  metadata.reflection = SetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelReq::kPlayerIdFieldNumber;
const int DelReq::kPropNameFieldNumber;
#endif  // !_MSC_VER

DelReq::DelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelReq::InitAsDefaultInstance() {
}

DelReq::DelReq(const DelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelReq::~DelReq() {
  SharedDtor();
}

void DelReq::SharedDtor() {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    delete player_id_;
  }
  if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
    delete prop_name_;
  }
  if (this != default_instance_) {
  }
}

void DelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelReq_descriptor_;
}

const DelReq& DelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

DelReq* DelReq::default_instance_ = NULL;

DelReq* DelReq::New() const {
  return new DelReq;
}

void DelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != &::google::protobuf::internal::kEmptyString) {
        player_id_->clear();
      }
    }
    if (has_prop_name()) {
      if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
        prop_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_id().data(), this->player_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prop_name;
        break;
      }

      // required string prop_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prop_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prop_name().data(), this->prop_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->player_id(), output);
  }

  // required string prop_name = 2;
  if (has_prop_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prop_name().data(), this->prop_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->prop_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_id(), target);
  }

  // required string prop_name = 2;
  if (has_prop_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prop_name().data(), this->prop_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prop_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_id());
    }

    // required string prop_name = 2;
    if (has_prop_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prop_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelReq::MergeFrom(const DelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_prop_name()) {
      set_prop_name(from.prop_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelReq::CopyFrom(const DelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DelReq::Swap(DelReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(prop_name_, other->prop_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelReq_descriptor_;
  metadata.reflection = DelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelResp::kRetCodeFieldNumber;
const int DelResp::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

DelResp::DelResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelResp::InitAsDefaultInstance() {
}

DelResp::DelResp(const DelResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelResp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelResp::~DelResp() {
  SharedDtor();
}

void DelResp::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void DelResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelResp_descriptor_;
}

const DelResp& DelResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbproxy_2eproto();
  return *default_instance_;
}

DelResp* DelResp::default_instance_ = NULL;

DelResp* DelResp::New() const {
  return new DelResp;
}

void DelResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelResp::MergeFrom(const DelResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelResp::CopyFrom(const DelResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DelResp::Swap(DelResp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelResp_descriptor_;
  metadata.reflection = DelResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbproxy

// @@protoc_insertion_point(global_scope)
