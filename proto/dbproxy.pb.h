// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbproxy.proto

#ifndef PROTOBUF_dbproxy_2eproto__INCLUDED
#define PROTOBUF_dbproxy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dbproxy {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dbproxy_2eproto();
void protobuf_AssignDesc_dbproxy_2eproto();
void protobuf_ShutdownFile_dbproxy_2eproto();

class PackageHead;
class GetReq;
class GetResp;
class SetReq;
class SetResp;
class DelReq;
class DelResp;

enum Command {
  CMD_GET_REQ = 100,
  CMD_GET_RESP = 101,
  CMD_SET_REQ = 102,
  CMD_SET_RESP = 103,
  CMD_DEL_REQ = 104,
  CMD_DEL_RESP = 105
};
bool Command_IsValid(int value);
const Command Command_MIN = CMD_GET_REQ;
const Command Command_MAX = CMD_DEL_RESP;
const int Command_ARRAYSIZE = Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_descriptor();
inline const ::std::string& Command_Name(Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_descriptor(), value);
}
inline bool Command_Parse(
    const ::std::string& name, Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command>(
    Command_descriptor(), name, value);
}
enum ErrorCode {
  ERR_SUCCESS = 0,
  ERR_MESSAGE_FORMAT = 100,
  ERR_DB_EXCEPTION = 101,
  ERR_GET_NOT_FOUND = 200
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = ERR_SUCCESS;
const ErrorCode ErrorCode_MAX = ERR_GET_NOT_FOUND;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class PackageHead : public ::google::protobuf::Message {
 public:
  PackageHead();
  virtual ~PackageHead();

  PackageHead(const PackageHead& from);

  inline PackageHead& operator=(const PackageHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageHead& default_instance();

  void Swap(PackageHead* other);

  // implements Message ----------------------------------------------

  PackageHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackageHead& from);
  void MergeFrom(const PackageHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 content_length = 1;
  inline bool has_content_length() const;
  inline void clear_content_length();
  static const int kContentLengthFieldNumber = 1;
  inline ::google::protobuf::uint32 content_length() const;
  inline void set_content_length(::google::protobuf::uint32 value);

  // required uint32 sn = 2;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 2;
  inline ::google::protobuf::uint32 sn() const;
  inline void set_sn(::google::protobuf::uint32 value);

  // required uint32 cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dbproxy.PackageHead)
 private:
  inline void set_has_content_length();
  inline void clear_has_content_length();
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 content_length_;
  ::google::protobuf::uint32 sn_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static PackageHead* default_instance_;
};
// -------------------------------------------------------------------

class GetReq : public ::google::protobuf::Message {
 public:
  GetReq();
  virtual ~GetReq();

  GetReq(const GetReq& from);

  inline GetReq& operator=(const GetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetReq& default_instance();

  void Swap(GetReq* other);

  // implements Message ----------------------------------------------

  GetReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetReq& from);
  void MergeFrom(const GetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline const ::std::string& player_id() const;
  inline void set_player_id(const ::std::string& value);
  inline void set_player_id(const char* value);
  inline void set_player_id(const char* value, size_t size);
  inline ::std::string* mutable_player_id();
  inline ::std::string* release_player_id();
  inline void set_allocated_player_id(::std::string* player_id);

  // required string prop_name = 2;
  inline bool has_prop_name() const;
  inline void clear_prop_name();
  static const int kPropNameFieldNumber = 2;
  inline const ::std::string& prop_name() const;
  inline void set_prop_name(const ::std::string& value);
  inline void set_prop_name(const char* value);
  inline void set_prop_name(const char* value, size_t size);
  inline ::std::string* mutable_prop_name();
  inline ::std::string* release_prop_name();
  inline void set_allocated_prop_name(::std::string* prop_name);

  // @@protoc_insertion_point(class_scope:dbproxy.GetReq)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_prop_name();
  inline void clear_has_prop_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_id_;
  ::std::string* prop_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static GetReq* default_instance_;
};
// -------------------------------------------------------------------

class GetResp : public ::google::protobuf::Message {
 public:
  GetResp();
  virtual ~GetResp();

  GetResp(const GetResp& from);

  inline GetResp& operator=(const GetResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResp& default_instance();

  void Swap(GetResp* other);

  // implements Message ----------------------------------------------

  GetResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetResp& from);
  void MergeFrom(const GetResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional string error_message = 3;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:dbproxy.GetResp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_error_message();
  inline void clear_has_error_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::std::string* error_message_;
  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static GetResp* default_instance_;
};
// -------------------------------------------------------------------

class SetReq : public ::google::protobuf::Message {
 public:
  SetReq();
  virtual ~SetReq();

  SetReq(const SetReq& from);

  inline SetReq& operator=(const SetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetReq& default_instance();

  void Swap(SetReq* other);

  // implements Message ----------------------------------------------

  SetReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetReq& from);
  void MergeFrom(const SetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline const ::std::string& player_id() const;
  inline void set_player_id(const ::std::string& value);
  inline void set_player_id(const char* value);
  inline void set_player_id(const char* value, size_t size);
  inline ::std::string* mutable_player_id();
  inline ::std::string* release_player_id();
  inline void set_allocated_player_id(::std::string* player_id);

  // required string prop_name = 2;
  inline bool has_prop_name() const;
  inline void clear_prop_name();
  static const int kPropNameFieldNumber = 2;
  inline const ::std::string& prop_name() const;
  inline void set_prop_name(const ::std::string& value);
  inline void set_prop_name(const char* value);
  inline void set_prop_name(const char* value, size_t size);
  inline ::std::string* mutable_prop_name();
  inline ::std::string* release_prop_name();
  inline void set_allocated_prop_name(::std::string* prop_name);

  // required string prop_value = 3;
  inline bool has_prop_value() const;
  inline void clear_prop_value();
  static const int kPropValueFieldNumber = 3;
  inline const ::std::string& prop_value() const;
  inline void set_prop_value(const ::std::string& value);
  inline void set_prop_value(const char* value);
  inline void set_prop_value(const char* value, size_t size);
  inline ::std::string* mutable_prop_value();
  inline ::std::string* release_prop_value();
  inline void set_allocated_prop_value(::std::string* prop_value);

  // @@protoc_insertion_point(class_scope:dbproxy.SetReq)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_prop_name();
  inline void clear_has_prop_name();
  inline void set_has_prop_value();
  inline void clear_has_prop_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_id_;
  ::std::string* prop_name_;
  ::std::string* prop_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static SetReq* default_instance_;
};
// -------------------------------------------------------------------

class SetResp : public ::google::protobuf::Message {
 public:
  SetResp();
  virtual ~SetResp();

  SetResp(const SetResp& from);

  inline SetResp& operator=(const SetResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetResp& default_instance();

  void Swap(SetResp* other);

  // implements Message ----------------------------------------------

  SetResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetResp& from);
  void MergeFrom(const SetResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional string error_message = 2;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:dbproxy.SetResp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_error_message();
  inline void clear_has_error_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* error_message_;
  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static SetResp* default_instance_;
};
// -------------------------------------------------------------------

class DelReq : public ::google::protobuf::Message {
 public:
  DelReq();
  virtual ~DelReq();

  DelReq(const DelReq& from);

  inline DelReq& operator=(const DelReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelReq& default_instance();

  void Swap(DelReq* other);

  // implements Message ----------------------------------------------

  DelReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelReq& from);
  void MergeFrom(const DelReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline const ::std::string& player_id() const;
  inline void set_player_id(const ::std::string& value);
  inline void set_player_id(const char* value);
  inline void set_player_id(const char* value, size_t size);
  inline ::std::string* mutable_player_id();
  inline ::std::string* release_player_id();
  inline void set_allocated_player_id(::std::string* player_id);

  // required string prop_name = 2;
  inline bool has_prop_name() const;
  inline void clear_prop_name();
  static const int kPropNameFieldNumber = 2;
  inline const ::std::string& prop_name() const;
  inline void set_prop_name(const ::std::string& value);
  inline void set_prop_name(const char* value);
  inline void set_prop_name(const char* value, size_t size);
  inline ::std::string* mutable_prop_name();
  inline ::std::string* release_prop_name();
  inline void set_allocated_prop_name(::std::string* prop_name);

  // @@protoc_insertion_point(class_scope:dbproxy.DelReq)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_prop_name();
  inline void clear_has_prop_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_id_;
  ::std::string* prop_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static DelReq* default_instance_;
};
// -------------------------------------------------------------------

class DelResp : public ::google::protobuf::Message {
 public:
  DelResp();
  virtual ~DelResp();

  DelResp(const DelResp& from);

  inline DelResp& operator=(const DelResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelResp& default_instance();

  void Swap(DelResp* other);

  // implements Message ----------------------------------------------

  DelResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelResp& from);
  void MergeFrom(const DelResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional string error_message = 2;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:dbproxy.DelResp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_error_message();
  inline void clear_has_error_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* error_message_;
  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dbproxy_2eproto();
  friend void protobuf_AssignDesc_dbproxy_2eproto();
  friend void protobuf_ShutdownFile_dbproxy_2eproto();

  void InitAsDefaultInstance();
  static DelResp* default_instance_;
};
// ===================================================================


// ===================================================================

// PackageHead

// required uint32 content_length = 1;
inline bool PackageHead::has_content_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageHead::set_has_content_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackageHead::clear_has_content_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackageHead::clear_content_length() {
  content_length_ = 0u;
  clear_has_content_length();
}
inline ::google::protobuf::uint32 PackageHead::content_length() const {
  return content_length_;
}
inline void PackageHead::set_content_length(::google::protobuf::uint32 value) {
  set_has_content_length();
  content_length_ = value;
}

// required uint32 sn = 2;
inline bool PackageHead::has_sn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageHead::set_has_sn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackageHead::clear_has_sn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackageHead::clear_sn() {
  sn_ = 0u;
  clear_has_sn();
}
inline ::google::protobuf::uint32 PackageHead::sn() const {
  return sn_;
}
inline void PackageHead::set_sn(::google::protobuf::uint32 value) {
  set_has_sn();
  sn_ = value;
}

// required uint32 cmd = 3;
inline bool PackageHead::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackageHead::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackageHead::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackageHead::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 PackageHead::cmd() const {
  return cmd_;
}
inline void PackageHead::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// -------------------------------------------------------------------

// GetReq

// required string player_id = 1;
inline bool GetReq::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetReq::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetReq::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetReq::clear_player_id() {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    player_id_->clear();
  }
  clear_has_player_id();
}
inline const ::std::string& GetReq::player_id() const {
  return *player_id_;
}
inline void GetReq::set_player_id(const ::std::string& value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void GetReq::set_player_id(const char* value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void GetReq::set_player_id(const char* value, size_t size) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetReq::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  return player_id_;
}
inline ::std::string* GetReq::release_player_id() {
  clear_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_id_;
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetReq::set_allocated_player_id(::std::string* player_id) {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    delete player_id_;
  }
  if (player_id) {
    set_has_player_id();
    player_id_ = player_id;
  } else {
    clear_has_player_id();
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prop_name = 2;
inline bool GetReq::has_prop_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetReq::set_has_prop_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetReq::clear_has_prop_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetReq::clear_prop_name() {
  if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
    prop_name_->clear();
  }
  clear_has_prop_name();
}
inline const ::std::string& GetReq::prop_name() const {
  return *prop_name_;
}
inline void GetReq::set_prop_name(const ::std::string& value) {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  prop_name_->assign(value);
}
inline void GetReq::set_prop_name(const char* value) {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  prop_name_->assign(value);
}
inline void GetReq::set_prop_name(const char* value, size_t size) {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  prop_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetReq::mutable_prop_name() {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  return prop_name_;
}
inline ::std::string* GetReq::release_prop_name() {
  clear_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prop_name_;
    prop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetReq::set_allocated_prop_name(::std::string* prop_name) {
  if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
    delete prop_name_;
  }
  if (prop_name) {
    set_has_prop_name();
    prop_name_ = prop_name;
  } else {
    clear_has_prop_name();
    prop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetResp

// required int32 ret_code = 1;
inline bool GetResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 GetResp::ret_code() const {
  return ret_code_;
}
inline void GetResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional bytes data = 2;
inline bool GetResp::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetResp::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetResp::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetResp::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& GetResp::data() const {
  return *data_;
}
inline void GetResp::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GetResp::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GetResp::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetResp::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* GetResp::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetResp::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string error_message = 3;
inline bool GetResp::has_error_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetResp::set_has_error_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetResp::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetResp::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& GetResp::error_message() const {
  return *error_message_;
}
inline void GetResp::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void GetResp::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void GetResp::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetResp::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* GetResp::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetResp::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetReq

// required string player_id = 1;
inline bool SetReq::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetReq::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetReq::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetReq::clear_player_id() {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    player_id_->clear();
  }
  clear_has_player_id();
}
inline const ::std::string& SetReq::player_id() const {
  return *player_id_;
}
inline void SetReq::set_player_id(const ::std::string& value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void SetReq::set_player_id(const char* value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void SetReq::set_player_id(const char* value, size_t size) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetReq::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  return player_id_;
}
inline ::std::string* SetReq::release_player_id() {
  clear_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_id_;
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetReq::set_allocated_player_id(::std::string* player_id) {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    delete player_id_;
  }
  if (player_id) {
    set_has_player_id();
    player_id_ = player_id;
  } else {
    clear_has_player_id();
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prop_name = 2;
inline bool SetReq::has_prop_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetReq::set_has_prop_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetReq::clear_has_prop_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetReq::clear_prop_name() {
  if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
    prop_name_->clear();
  }
  clear_has_prop_name();
}
inline const ::std::string& SetReq::prop_name() const {
  return *prop_name_;
}
inline void SetReq::set_prop_name(const ::std::string& value) {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  prop_name_->assign(value);
}
inline void SetReq::set_prop_name(const char* value) {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  prop_name_->assign(value);
}
inline void SetReq::set_prop_name(const char* value, size_t size) {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  prop_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetReq::mutable_prop_name() {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  return prop_name_;
}
inline ::std::string* SetReq::release_prop_name() {
  clear_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prop_name_;
    prop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetReq::set_allocated_prop_name(::std::string* prop_name) {
  if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
    delete prop_name_;
  }
  if (prop_name) {
    set_has_prop_name();
    prop_name_ = prop_name;
  } else {
    clear_has_prop_name();
    prop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prop_value = 3;
inline bool SetReq::has_prop_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetReq::set_has_prop_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetReq::clear_has_prop_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetReq::clear_prop_value() {
  if (prop_value_ != &::google::protobuf::internal::kEmptyString) {
    prop_value_->clear();
  }
  clear_has_prop_value();
}
inline const ::std::string& SetReq::prop_value() const {
  return *prop_value_;
}
inline void SetReq::set_prop_value(const ::std::string& value) {
  set_has_prop_value();
  if (prop_value_ == &::google::protobuf::internal::kEmptyString) {
    prop_value_ = new ::std::string;
  }
  prop_value_->assign(value);
}
inline void SetReq::set_prop_value(const char* value) {
  set_has_prop_value();
  if (prop_value_ == &::google::protobuf::internal::kEmptyString) {
    prop_value_ = new ::std::string;
  }
  prop_value_->assign(value);
}
inline void SetReq::set_prop_value(const char* value, size_t size) {
  set_has_prop_value();
  if (prop_value_ == &::google::protobuf::internal::kEmptyString) {
    prop_value_ = new ::std::string;
  }
  prop_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetReq::mutable_prop_value() {
  set_has_prop_value();
  if (prop_value_ == &::google::protobuf::internal::kEmptyString) {
    prop_value_ = new ::std::string;
  }
  return prop_value_;
}
inline ::std::string* SetReq::release_prop_value() {
  clear_has_prop_value();
  if (prop_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prop_value_;
    prop_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetReq::set_allocated_prop_value(::std::string* prop_value) {
  if (prop_value_ != &::google::protobuf::internal::kEmptyString) {
    delete prop_value_;
  }
  if (prop_value) {
    set_has_prop_value();
    prop_value_ = prop_value;
  } else {
    clear_has_prop_value();
    prop_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetResp

// required int32 ret_code = 1;
inline bool SetResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 SetResp::ret_code() const {
  return ret_code_;
}
inline void SetResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional string error_message = 2;
inline bool SetResp::has_error_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetResp::set_has_error_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetResp::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetResp::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& SetResp::error_message() const {
  return *error_message_;
}
inline void SetResp::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void SetResp::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void SetResp::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetResp::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* SetResp::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetResp::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DelReq

// required string player_id = 1;
inline bool DelReq::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelReq::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelReq::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelReq::clear_player_id() {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    player_id_->clear();
  }
  clear_has_player_id();
}
inline const ::std::string& DelReq::player_id() const {
  return *player_id_;
}
inline void DelReq::set_player_id(const ::std::string& value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void DelReq::set_player_id(const char* value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void DelReq::set_player_id(const char* value, size_t size) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DelReq::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  return player_id_;
}
inline ::std::string* DelReq::release_player_id() {
  clear_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_id_;
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DelReq::set_allocated_player_id(::std::string* player_id) {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    delete player_id_;
  }
  if (player_id) {
    set_has_player_id();
    player_id_ = player_id;
  } else {
    clear_has_player_id();
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string prop_name = 2;
inline bool DelReq::has_prop_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelReq::set_has_prop_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelReq::clear_has_prop_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelReq::clear_prop_name() {
  if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
    prop_name_->clear();
  }
  clear_has_prop_name();
}
inline const ::std::string& DelReq::prop_name() const {
  return *prop_name_;
}
inline void DelReq::set_prop_name(const ::std::string& value) {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  prop_name_->assign(value);
}
inline void DelReq::set_prop_name(const char* value) {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  prop_name_->assign(value);
}
inline void DelReq::set_prop_name(const char* value, size_t size) {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  prop_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DelReq::mutable_prop_name() {
  set_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    prop_name_ = new ::std::string;
  }
  return prop_name_;
}
inline ::std::string* DelReq::release_prop_name() {
  clear_has_prop_name();
  if (prop_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prop_name_;
    prop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DelReq::set_allocated_prop_name(::std::string* prop_name) {
  if (prop_name_ != &::google::protobuf::internal::kEmptyString) {
    delete prop_name_;
  }
  if (prop_name) {
    set_has_prop_name();
    prop_name_ = prop_name;
  } else {
    clear_has_prop_name();
    prop_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DelResp

// required int32 ret_code = 1;
inline bool DelResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 DelResp::ret_code() const {
  return ret_code_;
}
inline void DelResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional string error_message = 2;
inline bool DelResp::has_error_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelResp::set_has_error_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelResp::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelResp::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& DelResp::error_message() const {
  return *error_message_;
}
inline void DelResp::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void DelResp::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void DelResp::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DelResp::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* DelResp::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DelResp::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbproxy

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbproxy::Command>() {
  return ::dbproxy::Command_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbproxy::ErrorCode>() {
  return ::dbproxy::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dbproxy_2eproto__INCLUDED
